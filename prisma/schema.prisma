// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id                     Int       @id @default(autoincrement())
  name                   String    @unique(map: "brands_name_company_id_key") @db.VarChar(45)
  logo_img               String?   @db.VarChar(255)
  min_value              Decimal   @default(0.00) @db.Decimal(10, 2)
  min_installments_value Decimal   @default(0.00) @db.Decimal(10, 2)
  visible                Boolean?  @default(true) @db.TinyInt
  sku_order              String?   @db.VarChar(255)
  address_id             Int?      @unique(map: "brands_address_id_key")
  business_id            Int
  company_id             Int
  created_at             DateTime  @default(now()) @db.DateTime(3)
  updated_at             DateTime? @updatedAt @db.DateTime(3)
  deleted_at             DateTime? @db.DateTime(3)

  // address    Address? @relation(fields: [address_id], references: [id])
  // business   Business @relation(fields: [business_id], references: [id])
  // company    Company  @relation(fields: [company_id], references: [id])

  products Product[]

  @@map("brands")
}

model Category {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @unique(map: "categories_name_company_id_key") @db.VarChar(37)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  company_id Int

  // Relação (assumindo que Company existe, mas não é mapeada aqui)
  // company      Company        @relation(fields: [company_id], references: [id])

  products      Product[]
  subcategories Subcategory[]

  @@map("categories")
}

model PriceTable {
  id               Int       @id @default(autoincrement())
  description      String    @db.VarChar(255)
  price_adjustment Decimal   @default(1.0000) @db.Decimal(5, 4)
  minimum_value    Decimal   @db.Decimal(10, 2)
  visible          Boolean   @default(true) @db.TinyInt
  created_at       DateTime  @default(now()) @db.Timestamp(0)
  updated_at       DateTime? @updatedAt @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  company_id       Int

  // Relação (assumindo que Company existe, mas não é mapeada aqui)
  // company          Company            @relation(fields: [company_id], references: [id])

  price_tables_skus PriceTableSku[]

  @@map("price_tables")
}

model PriceTableSku {
  id             Int       @id @default(autoincrement())
  price          Decimal   @default(0.00) @db.Decimal(10, 2)
  created_at     DateTime  @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @updatedAt @db.Timestamp(0)
  sku_id         Int
  price_table_id Int

  sku        Sku        @relation(fields: [sku_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_price_table_sku")
  priceTable PriceTable @relation(fields: [price_table_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_price_table")

  @@unique([sku_id, price_table_id], map: "unique_sku_price_table")
  @@map("price_tables_skus")
}

model Product {
  id                    Int           @id @default(autoincrement())
  name                  String        @db.VarChar(255)
  reference             String        @db.VarChar(30)
  type                  ProductType
  gender                ProductGender
  prompt_delivery       Boolean       @db.TinyInt
  description           String?       @db.VarChar(255)
  company_id            Int
  erp_id                String?       @unique(map: "products_erpId_companyId_key") @db.VarChar(37)
  brand_id              Int
  deadline_id           Int?
  created_at            DateTime      @default(now()) @db.Timestamp(0)
  updated_at            DateTime?     @updatedAt @db.Timestamp(0)
  deleted_at            DateTime?     @db.Timestamp(0)
  category_id           Int           @db.UnsignedInt
  subcategory_id        Int?          @db.UnsignedInt
  category_order        Int?          @default(0) @db.TinyInt()
  composition_data      String?       @db.VarChar(255)
  technical_information String?       @db.VarChar(255)
  open_grid             Boolean       @default(false) @db.TinyInt
  ipi                   Decimal       @default(0.0000) @db.Decimal(5, 4)
  is_discontinued       Boolean       @default(false) @db.TinyInt
  is_launch             Boolean       @default(false) @db.TinyInt
  is_visible            Boolean       @default(true) @db.TinyInt
  colection             String?       @db.VarChar(255)
  st                    Decimal       @default(0.0000) @db.Decimal(5, 4)

  brand       Brand        @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_brands_company")
  category    Category     @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_categories_products")
  subcategory Subcategory? @relation(fields: [subcategory_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_subcategories_products")

  // Relações (assumindo que Company e Deadline existem, mas não são mapeadas aqui)
  // company     Company?     @relation(fields: [company_id], references: [id])
  // deadline    Deadline?    @relation(fields: [deadline_id], references: [id])

  variants Variant[]

  @@map("products")
}

model Sku {
  id                Int       @id @default(autoincrement())
  size              String    @db.VarChar(10)
  stock             Int
  price             Decimal   @db.Decimal(10, 2)
  code              String    @db.VarChar(13)
  min_quantity      Int?      @default(1)
  multiple_quantity Int
  erpId             String?   @unique(map: "skus_erpId_key") @db.VarChar(50)
  variant_id        Int
  cest              String?   @db.VarChar(50)
  height            Float?
  length            Float?
  ncm               String?   @db.VarChar(50)
  weight            Float?
  width             Float?
  created_at        DateTime  @default(now()) @db.DateTime(0)
  updated_at        DateTime? @updatedAt @db.DateTime(0)
  deleted_at        DateTime? @db.DateTime(0)

  variant           Variant         @relation(fields: [variant_id], references: [id], onUpdate: Cascade)
  price_tables_skus PriceTableSku[]

  @@map("skus")
}

model Subcategory {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String    @unique(map: "subcategories_name_category_id_key") @db.VarChar(37)
  category_id Int       @db.UnsignedInt
  created_at  DateTime? @default(now()) @db.Timestamp(0)

  category Category  @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_subcategories_categories")
  products Product[]

  @@map("subcategories")
}

model Variant {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  hex_code   String?   @db.VarChar(7)
  product_id Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_variants_products")
  skus    Sku[]

  @@unique([name, product_id], map: "unique_variant_name_product_id")
  @@map("variants")
}

enum ProductType {
  NACIONAL
  IMPORTADO
}

enum ProductGender {
  MASCULINO
  FEMININO
  INFANTIL
  JUVENIL
  UNISSEX
  FAT
  OUTRO
}
